buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}

plugins {
    id 'com.matthewprenger.cursegradle' version '1.0.7'
    id 'org.ajoberstar.grgit' version '1.3.2'
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'maven'
apply plugin: "org.ajoberstar.grgit"

import org.ajorberstar.grgit.*

ext.git = grgit.open(file('.'))

ext {
    configFile = file "build.properties"

    revision = git.head().abbreviatedId
    depth = git.log().size()
}

configFile.withReader {
    def prop = new Properties()
    prop.load(it)
    //noinspection GrUnresolvedAccess
    ext.config = new ConfigSlurper().parse prop
}

version = config.mod_version
group= "portablejim.additionalresources" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "additionalresources"

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

minecraft {
    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'snapshot', version: '20180921-1.13'
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    //accessTransformer = file('my_at.cfg')

    // default run configurations.
    // these can be tweaked, removed, or duplicated as needed.
    runs {
        client = {
            // recommended logging data for a userdev environment
            properties 'forge.logging.markers': ''
            // recommended logging level for the console
            properties 'forge.logging.console.level': 'info'
            workingDirectory project.file('run').canonicalPath
            source sourceSets.main
        }
        server = {
            // recommended logging data for a userdev environment
            properties 'forge.logging.markers': ''
            // recommended logging level for the console
            properties 'forge.logging.console.level': 'debug'
            workingDirectory project.file('run').canonicalPath
            source sourceSets.main
        }
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:' + config.minecraft_version + '-' + config.forge_version
}

version = "${config.minecraft_version}-${config.mod_version}.${ext.depth}+${ext.revision}"

processResources {
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        include 'version.properties'

        // replace version and mcversion
        expand 'version':project.config.mod_version, 'mcversion':project.config.minecraft_version, 'gitrev': revision,  'revnumber': depth
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
        exclude 'version.properties'
    }
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'dev'
}

jar {
    manifest {
        attributes(["FMLCorePlugin": "portablejim.additionalresources.Ar_CorePlugin",
                    "Specification-Title": "examplemod",
                    "Specification-Vendor": "examplemodsareus",
                    "Specification-Version": "24.0", // We are version 1 of the modlauncher specification
                    "Implementation-Title": project.name,
                    "Implementation-Version": "${version}",
                    "Implementation-Vendor" :"portablejim",
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")],)
    }
}

//noinspection GrUnresolvedAccess
task release(type: Copy) {
    dependsOn "build"

    from project.tasks.jar.archivePath
    into "release/"
}

build.dependsOn deobfJar

artifacts {
    archives deobfJar
}

configurations {
    deployerJars
}

curseforge {
    if (project.hasProperty('curseForgeApiKey')) apiKey = project.curseForgeApiKey
    else apiKey = 0
    //debug = true
    project {
        id = '225124'
        changelog = new File(rootDir, 'Changelog.md').getText('utf-8').split('\n-{3,8}|\n\n')[2]
        changelogType = 'text'
        releaseType = 'alpha' // Just a default
        mainArtifact (jar) {
            displayName = "Additional Resources $config.mod_version [MC$config.compatible_versions; rev $depth]"
        }

        addArtifact deobfJar

        //addGameVersion config.compatible_versions
        for (String newVersion : config.compatible_versions.split(",")) {
            addGameVersion newVersion
        }
    }
}

task curseAlpha(dependsOn: tasks.curseforge) {}
task curseBeta(dependsOn: tasks.curseforge) {}
task curseRelease(dependsOn: tasks.curseforge) {}

gradle.taskGraph.whenReady { taskGraph ->
    curseforge.curseProjects.each { it.mainArtifact.displayName = "Additional Resources $config.mod_version [MC$config.compatible_versions; rev $ext.depth]" }
    if (taskGraph.hasTask(curseAlpha)) {
        curseforge.curseProjects.each { it.additionalArtifacts.each { it.releaseType = 'alpha' } }
        curseforge.curseProjects.each { it.releaseType = 'alpha' }
        curseforge.curseProjects.each { it.mainArtifact.releaseType = 'alpha' }
    } else if (taskGraph.hasTask(curseBeta)) {
        curseforge.curseProjects.each { it.releaseType = 'beta' }
        curseforge.curseProjects.each { it.mainArtifact.releaseType = 'beta' }
        curseforge.curseProjects.each { it.additionalArtifacts.each { it.releaseType = 'beta' } }
    } else if (taskGraph.hasTask(curseRelease)) {
        curseforge.curseProjects.each { it.releaseType = 'release' }
        curseforge.curseProjects.each { it.mainArtifact.releaseType = 'release' }
        curseforge.curseProjects.each { it.additionalArtifacts.each { it.releaseType = 'release' } }
    }
}


